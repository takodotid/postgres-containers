name: Build & Push OCI Image to OCI Image Registry

on:
  workflow_call:
    inputs:
      dockerfile:
        required: true
        type: string
      image:
        required: true
        type: string

permissions:
  contents: read
  packages: write

jobs:
  build:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.platform }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runs-on: ubuntu-24.04
          - platform: linux/arm64
            runs-on: ubuntu-24.04-arm
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Check Out Repository
        uses: actions/checkout@v5.0.0

      - name: Set up platform pairs
        id: platform
        run: |
          platform=${{ matrix.platform }}
          echo "pair=${platform//\//-}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Generate Docker image metadata
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ inputs.image }}

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: ./${{ inputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ inputs.image }}",push-by-digest=true,name-canonical=true,push=${{ github.event_name == 'push' }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4.6.2
        with:
          name: digests-${{ steps.platform.outputs.pair }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Get Postgres version in Dockerfile
        id: postgres
        run: |
          export VERSION=$(cat ${{ inputs.dockerfile }} | sed -n 's/.*postgresql:\([0-9.]*\).*/\1/p')
          echo "MAJOR=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "MINOR=$(echo $VERSION | cut -d. -f2)" >> $GITHUB_OUTPUT

    outputs:
      MAJOR: ${{ steps.postgres.outputs.MAJOR }}
      MINOR: ${{ steps.postgres.outputs.MINOR }}

  merge:
    runs-on: ubuntu-24.04
    needs: [build]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5.0.0
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Generate Docker image metadata
        uses: docker/metadata-action@v5.8.0
        id: meta
        with:
          images: ${{ inputs.image }}
          tags: |
            ${{ needs.build.outputs.MAJOR }}
            type=sha,prefix=${{ needs.build.outputs.MAJOR }}-,suffix=,format=short
            type=sha,prefix=${{ needs.build.outputs.MAJOR }}-,suffix=,format=long

            ${{ needs.build.outputs.MAJOR }}.${{ needs.build.outputs.MINOR }}
            type=sha,prefix=${{ needs.build.outputs.MAJOR }}.${{ needs.build.outputs.MINOR }}-,suffix=,format=short
            type=sha,prefix=${{ needs.build.outputs.MAJOR }}.${{ needs.build.outputs.MINOR }}-,suffix=,format=long

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ inputs.image }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ inputs.image }}:${{ steps.meta.outputs.version }}
